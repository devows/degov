/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TreasuryImport } from './routes/treasury'
import { Route as ProfileImport } from './routes/profile'
import { Route as MembersImport } from './routes/members'
import { Route as DelegateImport } from './routes/delegate'
import { Route as IndexImport } from './routes/index'
import { Route as ProposalsIndexImport } from './routes/proposals/index'
import { Route as ProposalsAddressImport } from './routes/proposals/$address'

// Create/Update Routes

const TreasuryRoute = TreasuryImport.update({
  id: '/treasury',
  path: '/treasury',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const MembersRoute = MembersImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => rootRoute,
} as any)

const DelegateRoute = DelegateImport.update({
  id: '/delegate',
  path: '/delegate',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProposalsIndexRoute = ProposalsIndexImport.update({
  id: '/proposals/',
  path: '/proposals/',
  getParentRoute: () => rootRoute,
} as any)

const ProposalsAddressRoute = ProposalsAddressImport.update({
  id: '/proposals/$address',
  path: '/proposals/$address',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/delegate': {
      id: '/delegate'
      path: '/delegate'
      fullPath: '/delegate'
      preLoaderRoute: typeof DelegateImport
      parentRoute: typeof rootRoute
    }
    '/members': {
      id: '/members'
      path: '/members'
      fullPath: '/members'
      preLoaderRoute: typeof MembersImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/treasury': {
      id: '/treasury'
      path: '/treasury'
      fullPath: '/treasury'
      preLoaderRoute: typeof TreasuryImport
      parentRoute: typeof rootRoute
    }
    '/proposals/$address': {
      id: '/proposals/$address'
      path: '/proposals/$address'
      fullPath: '/proposals/$address'
      preLoaderRoute: typeof ProposalsAddressImport
      parentRoute: typeof rootRoute
    }
    '/proposals/': {
      id: '/proposals/'
      path: '/proposals'
      fullPath: '/proposals'
      preLoaderRoute: typeof ProposalsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/delegate': typeof DelegateRoute
  '/members': typeof MembersRoute
  '/profile': typeof ProfileRoute
  '/treasury': typeof TreasuryRoute
  '/proposals/$address': typeof ProposalsAddressRoute
  '/proposals': typeof ProposalsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/delegate': typeof DelegateRoute
  '/members': typeof MembersRoute
  '/profile': typeof ProfileRoute
  '/treasury': typeof TreasuryRoute
  '/proposals/$address': typeof ProposalsAddressRoute
  '/proposals': typeof ProposalsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/delegate': typeof DelegateRoute
  '/members': typeof MembersRoute
  '/profile': typeof ProfileRoute
  '/treasury': typeof TreasuryRoute
  '/proposals/$address': typeof ProposalsAddressRoute
  '/proposals/': typeof ProposalsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/delegate'
    | '/members'
    | '/profile'
    | '/treasury'
    | '/proposals/$address'
    | '/proposals'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/delegate'
    | '/members'
    | '/profile'
    | '/treasury'
    | '/proposals/$address'
    | '/proposals'
  id:
    | '__root__'
    | '/'
    | '/delegate'
    | '/members'
    | '/profile'
    | '/treasury'
    | '/proposals/$address'
    | '/proposals/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DelegateRoute: typeof DelegateRoute
  MembersRoute: typeof MembersRoute
  ProfileRoute: typeof ProfileRoute
  TreasuryRoute: typeof TreasuryRoute
  ProposalsAddressRoute: typeof ProposalsAddressRoute
  ProposalsIndexRoute: typeof ProposalsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DelegateRoute: DelegateRoute,
  MembersRoute: MembersRoute,
  ProfileRoute: ProfileRoute,
  TreasuryRoute: TreasuryRoute,
  ProposalsAddressRoute: ProposalsAddressRoute,
  ProposalsIndexRoute: ProposalsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/delegate",
        "/members",
        "/profile",
        "/treasury",
        "/proposals/$address",
        "/proposals/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/delegate": {
      "filePath": "delegate.tsx"
    },
    "/members": {
      "filePath": "members.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/treasury": {
      "filePath": "treasury.tsx"
    },
    "/proposals/$address": {
      "filePath": "proposals/$address.tsx"
    },
    "/proposals/": {
      "filePath": "proposals/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
